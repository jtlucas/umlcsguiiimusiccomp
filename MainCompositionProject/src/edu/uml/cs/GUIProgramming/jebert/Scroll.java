/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Scroll.java
 *
 * Created on Feb 23, 2009, 9:34:53 PM
 */

package edu.uml.cs.GUIProgramming.jebert;

import java.awt.Component;
import java.awt.Dimension;
import java.awt.Rectangle;
import javax.swing.BorderFactory;
import javax.swing.BoundedRangeModel;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JScrollBar;
import javax.swing.ScrollPaneConstants;
import javax.swing.SwingUtilities;

/**
 *
 * @author Jim Ebert
 */
public class Scroll extends javax.swing.JFrame {

    /** Size of the area taken up by the new labels */
    private Dimension area = new Dimension(0,0);    

    /** Creates new form Scroll */
    public Scroll() {
        
        initComponents();

//        jpnlHold = new DrawingPane();
//        jsclShift = new JScrollPane(jpnlHold);

        //jsclShift.setPreferredSize(new Dimension(jpnlHold.getWidth() + 10, jpnlHold.getHeight() + 10));
//        jpnlHold.setPreferredSize(jpnlHold.getPreferredSize());
        jsclShift.setVerticalScrollBarPolicy
                (ScrollPaneConstants.VERTICAL_SCROLLBAR_NEVER);
        jsclShift.setHorizontalScrollBarPolicy
                (ScrollPaneConstants.HORIZONTAL_SCROLLBAR_NEVER);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnlScrollPaneHolder = new javax.swing.JPanel();
        jsclShift = new javax.swing.JScrollPane();
        jpnlHold = new javax.swing.JPanel();
        jbtnMove = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Scroll Practice");

        jpnlHold.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseReleased(java.awt.event.MouseEvent evt) {
                jpnlHoldMouseReleased(evt);
            }
        });

        jbtnMove.setText("Move");
        jbtnMove.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnMoveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jpnlHoldLayout = new javax.swing.GroupLayout(jpnlHold);
        jpnlHold.setLayout(jpnlHoldLayout);
        jpnlHoldLayout.setHorizontalGroup(
            jpnlHoldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlHoldLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(jbtnMove)
                .addContainerGap(249, Short.MAX_VALUE))
        );
        jpnlHoldLayout.setVerticalGroup(
            jpnlHoldLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnlHoldLayout.createSequentialGroup()
                .addGap(76, 76, 76)
                .addComponent(jbtnMove)
                .addContainerGap(218, Short.MAX_VALUE))
        );

        jsclShift.setViewportView(jpnlHold);

        javax.swing.GroupLayout jpnlScrollPaneHolderLayout = new javax.swing.GroupLayout(jpnlScrollPaneHolder);
        jpnlScrollPaneHolder.setLayout(jpnlScrollPaneHolderLayout);
        jpnlScrollPaneHolderLayout.setHorizontalGroup(
            jpnlScrollPaneHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsclShift, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
        );
        jpnlScrollPaneHolderLayout.setVerticalGroup(
            jpnlScrollPaneHolderLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jsclShift, javax.swing.GroupLayout.DEFAULT_SIZE, 319, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnlScrollPaneHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnlScrollPaneHolder, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jbtnMoveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnMoveActionPerformed
        JScrollBar bar = jsclShift.getVerticalScrollBar();
        BoundedRangeModel model = bar.getModel();
        model.setValueIsAdjusting(true);
        model.setValue(model.getMinimum());

        model.setValue(0);

        //ScrollHelper pause = new ScrollHelper(1);
        bar.repaint();
        //pause.run();

        for(int i = bar.getValue(); i != bar.getVisibleAmount(); ++i) {
            move(model, i);
            bar.repaint();
            //Thread.sleep(10);
        }

        model.setValueIsAdjusting(false);
}//GEN-LAST:event_jbtnMoveActionPerformed

    private void jpnlHoldMouseReleased(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jpnlHoldMouseReleased
        // TODO add your handling code here:
        jsclShift.setVerticalScrollBarPolicy
                (ScrollPaneConstants.VERTICAL_SCROLLBAR_AS_NEEDED);
        jsclShift.setHorizontalScrollBarPolicy
                (ScrollPaneConstants.HORIZONTAL_SCROLLBAR_AS_NEEDED);

        final int W = 30;
        final int H = 30;

        // holds the x position of the mouse event
        int x ;
        // holds the y position of the mouse event
        int y ;
        // holds the dimensions and position of the new label
        Rectangle rect = new Rectangle();

        boolean changed = false;
        if (SwingUtilities.isRightMouseButton(evt)) {
            //This will clear the graphic objects.
            removeAdded();
            area.width=0;
            area.height=0;
            changed = true;
        } else {
            x = evt.getX();// - W/2;
            y = evt.getY();// - H/2;
            if (x < 0) x = 0;
            if (y < 0) y = 0;
            rect = new Rectangle(x, y, W, H);
            
            jpnlHold.scrollRectToVisible(rect);

            // check to see if the area of the new labels is
            // greater than the original area
            int this_width = (x + W + 2);
            if (this_width > area.width) {
                area.width = this_width; 
                changed = true;
            }

            int this_height = (y + H + 2);
            if (this_height > area.height) {
                area.height = this_height; 
                changed = true;
            }

            JLabel j = new JLabel();
            j.setText("New");
            j.setBorder(BorderFactory.createEtchedBorder());
            jpnlHold.add(j);
            j.setBounds(rect);//(evt.getX(), evt.getY(), 30, 30);
        }
        if (changed) {
            //Update client's preferred size because
            //the area taken up by the graphics has
            //gotten larger or smaller (if cleared).
            jpnlHold.setPreferredSize(area);

            //Let the scroll pane know to update itself
            //and its scrollbars.
            jpnlHold.revalidate();
        }
        jpnlHold.repaint();
    }//GEN-LAST:event_jpnlHoldMouseReleased

    /**
     * Removes the added Labels
     */
    private void removeAdded()
    {
        Component[] c = jpnlHold.getComponents();

        for(int i = 0; i != c.length; ++i)
        {
            if(c[i].getClass() != JButton.class)
            {
                jpnlHold.remove(c[i]);
            }
        }
    }

    private void move(BoundedRangeModel model, int size)
    {
        model.setValue(size);

        //ScrollHelper pause = new ScrollHelper(size);
        //pause.run();
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Scroll().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** Moves the scroll pane around */
    private javax.swing.JButton jbtnMove;
    /** holds the gui components */
    private javax.swing.JPanel jpnlHold;
    /** holds the scroll pane */
    private javax.swing.JPanel jpnlScrollPaneHolder;
    /** Allows the panel to be scrollable */
    private javax.swing.JScrollPane jsclShift;
    // End of variables declaration//GEN-END:variables


}