/*
 * PlayFromButtons.java
 *
 * Created on April 15, 2008, 12:30 PM
 */

package edu.uml.cs.GUIProgramming.jebert;

import edu.uml.cs.GUIProgramming.heines.GUIUtilities;
import java.util.Vector;
import javax.swing.JButton;


/**
 * This class allows the user to create a sequence of WAV files to play by
 * clicking buttons.  The clicks are automatically stored, and when the Play
 * Stored Sequence button is clicked, they are all played back in order and
 * without "clobbering" each other
 * @author Jesse Heines, UMass Lowell Computer Science
 * @author  <a href="heines@cs.uml.edu">heines@cs.uml.edu</a>
 * @version 1.2, 2008-04-27, April 27, 2008
 */
public class PlayFromButtons_Jim extends javax.swing.JFrame {
  
  /** the following is required to keep NetBeans happy */
  static final long serialVersionUID = 0 ;

  /**
   * sequence of buttons pressed
   */
  Vector<String> vecStoredSequence = new Vector<String>() ;

  /**
   * sequence of buttons pressed
   */
  Vector<String> vecAllNumbersSequence = new Vector<String>() ;

  /**
   * sequence to play, where 1 = vecStoredSequence and 2 = vecAllNumbersSequence
   */
  int nSequenceToPlay = 1 ;

  /**
   * path to the audio files in Jim's src directory
   */
  String strFilesHome = "src/edu/uml/cs/GUIProgramming/jebert/" ;

  /**
   * array of names of WAV files
   */
  String[] strFiles = { "zero", "one", "two", "three", "four",
      "five", "six", "seven", "eight", "nine" } ;


  /** Creates new form PlayFromButtons */
  public PlayFromButtons_Jim() {
    // set the UI manager
    GUIUtilities.SetNetBeansCompatibleUIManager();

    initComponents() ;

    // set background of text field to that of frame
    jtxfStoredSequence.setBackground( this.getBackground() ) ;
  }
  
  /** This method is called from within the constructor to
   * initialize the form.
   * WARNING: Do NOT modify this code. The content of this method is
   * always regenerated by the Form Editor.
   */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jbtnPlayStored = new javax.swing.JButton();
        jbtnClearStored = new javax.swing.JButton();
        btn1 = new javax.swing.JButton();
        btn2 = new javax.swing.JButton();
        jbtnPlayAll = new javax.swing.JButton();
        jtxfStoredSequence = new javax.swing.JTextField();
        jlblStoredSequence = new javax.swing.JLabel();
        btn3 = new javax.swing.JButton();
        btnExit = new javax.swing.JButton();
        btn4 = new javax.swing.JButton();
        btn5 = new javax.swing.JButton();
        btn6 = new javax.swing.JButton();
        btn7 = new javax.swing.JButton();
        btn8 = new javax.swing.JButton();
        btn9 = new javax.swing.JButton();
        btn0 = new javax.swing.JButton();
        jbtnDelete = new javax.swing.JButton();
        jbrProgress = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Play from Buttons");

        jbtnPlayStored.setText("Play Stored Sequence");
        jbtnPlayStored.setEnabled(false);
        jbtnPlayStored.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPlayStoredActionPerformed(evt);
            }
        });

        jbtnClearStored.setText("Clear Stored Sequence");
        jbtnClearStored.setEnabled(false);
        jbtnClearStored.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnClearStoredActionPerformed(evt);
            }
        });

        btn1.setMnemonic('1');
        btn1.setText("1");
        btn1.setActionCommand("one.wav");
        btn1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn2.setMnemonic('2');
        btn2.setText("2");
        btn2.setActionCommand("two.wav");
        btn2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        jbtnPlayAll.setText("Play 0 to 9 Test");
        jbtnPlayAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnPlayAllActionPerformed(evt);
            }
        });

        jtxfStoredSequence.setDisabledTextColor(new java.awt.Color(0, 0, 0));
        jtxfStoredSequence.setEnabled(false);
        jtxfStoredSequence.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                jtxfStoredSequencePropertyChange(evt);
            }
        });

        jlblStoredSequence.setLabelFor(jtxfStoredSequence);
        jlblStoredSequence.setText("Stored Sequence");

        btn3.setMnemonic('3');
        btn3.setText("3");
        btn3.setActionCommand("three.wav");
        btn3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btnExit.setText("Exit");
        btnExit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnExitActionPerformed(evt);
            }
        });

        btn4.setMnemonic('4');
        btn4.setText("4");
        btn4.setActionCommand("four.wav");
        btn4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn5.setMnemonic('5');
        btn5.setText("5");
        btn5.setActionCommand("five.wav");
        btn5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn6.setMnemonic('6');
        btn6.setText("6");
        btn6.setActionCommand("six.wav");
        btn6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn7.setMnemonic('7');
        btn7.setText("7");
        btn7.setActionCommand("seven.wav");
        btn7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn8.setMnemonic('8');
        btn8.setText("8");
        btn8.setActionCommand("eight.wav");
        btn8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn9.setMnemonic('9');
        btn9.setText("9");
        btn9.setActionCommand("nine.wav");
        btn9.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        btn0.setMnemonic('0');
        btn0.setText("0");
        btn0.setActionCommand("zero.wav");
        btn0.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                NumberedButtonActionPerformed(evt);
            }
        });

        jbtnDelete.setText("Delete Last Digit");
        jbtnDelete.setEnabled(false);
        jbtnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbtnDeleteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jtxfStoredSequence, javax.swing.GroupLayout.DEFAULT_SIZE, 438, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn3))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btn6)
                                .addGap(47, 47, 47)
                                .addComponent(jbrProgress, javax.swing.GroupLayout.PREFERRED_SIZE, 236, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btn7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btn0)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(btn8)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(btn9))))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jlblStoredSequence)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jbtnDelete)))
                        .addGap(36, 36, 36))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnPlayStored, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbtnClearStored)
                        .addGap(162, 162, 162))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jbtnPlayAll)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 280, Short.MAX_VALUE)
                        .addComponent(btnExit)
                        .addContainerGap())))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn1)
                            .addComponent(btn2)
                            .addComponent(btn3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn4)
                            .addComponent(btn5)
                            .addComponent(btn6))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btn7)
                            .addComponent(btn8)
                            .addComponent(btn9))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btn0))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(49, 49, 49)
                        .addComponent(jbrProgress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jlblStoredSequence)
                    .addComponent(jbtnDelete))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtxfStoredSequence, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnPlayStored)
                    .addComponent(jbtnClearStored))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 40, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jbtnPlayAll)
                    .addComponent(btnExit))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

  /**
   * This method is called when the Play Stored Sequence button is pressed.
   * It passes the vector of stored WAV file names to the PlaySequence class
   * which plays them in sequence.
   * @param evt a standard Java action event for a JButton 
   */
  private void jbtnPlayStoredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPlayStoredActionPerformed
    //System.out.println("m");
    jbrProgress.setValue( 0 ) ;
    nSequenceToPlay = 1 ;   // 1 = vecStoredSequence
    PlaySequence thread = new PlaySequence( this, vecStoredSequence ) ;
    thread.start() ;
  }//GEN-LAST:event_jbtnPlayStoredActionPerformed

  /**
   * This method deletes all elements in the stored sequence and disables 
   * the Play, Clear, and Delete buttons.
   * @param evt a standard Java action event for a JButton 
   */
  private void jbtnClearStoredActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnClearStoredActionPerformed
    // TODO add your handling code here:
    jtxfStoredSequence.setText( "" ) ;
    jbtnPlayStored.setEnabled( false ) ;
    jbtnClearStored.setEnabled( false ) ;
    jbtnDelete.setEnabled( false ) ;
    vecStoredSequence.removeAllElements() ;
  }//GEN-LAST:event_jbtnClearStoredActionPerformed

  /**
   * This method is called when <i>any</i> of the 0-9 buttons is pressed.
   * It adds the appropriate element to the stored sequence and enables the
   * Play, Clear, and Delete buttons.
   * @param evt a standard Java action event for a JButton 
   */
  private void NumberedButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_NumberedButtonActionPerformed
    // TODO add your handling code here:
    jtxfStoredSequence.setText( jtxfStoredSequence.getText() +
        ((JButton) evt.getSource()).getText() ) ;
    jbtnPlayStored.setEnabled( true ) ;
    jbtnClearStored.setEnabled( true ) ;
    jbtnDelete.setEnabled( true ) ;
    vecStoredSequence.add( strFilesHome + evt.getActionCommand() ) ;
    new AePlayWave( strFilesHome + evt.getActionCommand() ).start() ;
  }//GEN-LAST:event_NumberedButtonActionPerformed

  /**
   * This method is called when the Play 0 to 9 Test button is pressed to
   * play all the WAV files for testing purposes.
   * @param evt a standard Java action event for a JButton 
   */
  private void jbtnPlayAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnPlayAllActionPerformed
    // create a local vector and add all the WAV files to that data structure
    // Vector<String> vecSequence = new Vector<String>() ;
    vecAllNumbersSequence.clear() ;
    for ( int k = 0 ; k < strFiles.length ; k++ ) {
      vecAllNumbersSequence.add( strFilesHome + strFiles[ k ] + ".wav " ) ;
    }
    // play the created sequence of WAV files
    jbrProgress.setValue( 0 ) ;
    nSequenceToPlay = 2 ;   // 2 = vecAllNumbersSequence
    PlaySequence thread = new PlaySequence( this, vecAllNumbersSequence ) ;
    thread.start() ;
}//GEN-LAST:event_jbtnPlayAllActionPerformed

  /**
   * This method exits the program when the Exit button is pressed.
   * @param evt a standard Java action event for a JButton 
   */
  private void btnExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnExitActionPerformed
    // TODO add your handling code here:
    System.exit( 0 ) ;
  }//GEN-LAST:event_btnExitActionPerformed

  /**
   * This method deletes the last element added to the stored sequence
   * and disables the Play, Clear, and Delete buttons if appropriate.
   * @param evt a standard Java action event for a JButton 
   */
  private void jbtnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbtnDeleteActionPerformed
    // TODO add your handling code here:
    vecStoredSequence.remove( vecStoredSequence.size()-1 ) ;
    jtxfStoredSequence.setText( jtxfStoredSequence.getText().substring( 0, vecStoredSequence.size() ));
    if ( vecStoredSequence.size() == 0 ) {
      jbtnPlayStored.setEnabled( false ) ;
      jbtnClearStored.setEnabled( false ) ;
      jbtnDelete.setEnabled( false ) ;
    }
  }//GEN-LAST:event_jbtnDeleteActionPerformed

  /**
   * Set the value of the progress bar to the value passed from the PlaySequence thread.
   */
  public void incrementProgressBarValue() {
    int jpbIncrement ;
    switch ( nSequenceToPlay ) {
      case 1 :
        jpbIncrement = Math.round( 1.0f * jbrProgress.getMaximum() / vecStoredSequence.size() ) ;
        jbrProgress.setValue( jbrProgress.getValue() + jpbIncrement ) ;
        break ;
      case 2 :
        jpbIncrement = Math.round( 1.0f * jbrProgress.getMaximum() / vecAllNumbersSequence.size() ) ;
        jbrProgress.setValue( jbrProgress.getValue() + jpbIncrement ) ;
        break ;
    }
  }

  private void jtxfStoredSequencePropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_jtxfStoredSequencePropertyChange

  }//GEN-LAST:event_jtxfStoredSequencePropertyChange

  /**
   * @param args the command line arguments
   */
  public static void main(String args[]) {
    java.awt.EventQueue.invokeLater(new Runnable() {
      public void run() {
        new PlayFromButtons_Jim().setVisible(true);
      }
    });
  }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    /** the 0 button */
    private javax.swing.JButton btn0;
    /** the 1 button */
    private javax.swing.JButton btn1;
    /** the 2 button */
    private javax.swing.JButton btn2;
    /** the 3 button */
    private javax.swing.JButton btn3;
    /** the 4 button */
    private javax.swing.JButton btn4;
    /** the 5 button */
    private javax.swing.JButton btn5;
    /** the 6 button */
    private javax.swing.JButton btn6;
    /** the 7 button */
    private javax.swing.JButton btn7;
    /** the 8 button */
    private javax.swing.JButton btn8;
    /** the 9 button */
    private javax.swing.JButton btn9;
    /** button to exit the program */
    private javax.swing.JButton btnExit;
    /** shows the progress of the sequence */
    private javax.swing.JProgressBar jbrProgress;
    /** button to clear the stored sequence */
    private javax.swing.JButton jbtnClearStored;
    /** button to delete the last digit added to the stored sequence */
    private javax.swing.JButton jbtnDelete;
    /** button to play the 0 to 9 sounds in sequence as a test */
    private javax.swing.JButton jbtnPlayAll;
    /** button to play the stored sequence */
    private javax.swing.JButton jbtnPlayStored;
    /** label for the text field that displays the stored sequence */
    private javax.swing.JLabel jlblStoredSequence;
    /** text field for displaying the stored sequence */
    private javax.swing.JTextField jtxfStoredSequence;
    // End of variables declaration//GEN-END:variables
  
}

/**
 * This class plays a sequence of recorded sounds in a separate thread so that
 * the user does not lose control of the UI.
 * @author Jesse Heines, UMass Lowell Computer Science
 * @author <a href="mailto:heines@cs.uml.edu">heines@cs.uml.edu</a>
 * @version 1.0, 2008-04-29, April 29, 2008
 */
class PlaySequence extends Thread {

  /**
   * the main application with the GUI thread
   */
  PlayFromButtons_Jim theApp ;

  /**
   * sequence to play
   */
  Vector<String> vecSequence = new Vector<String>() ;

  /**
   * constructor
   * @param vecSequence required sequence of WAV file paths to play
   */
  public PlaySequence( PlayFromButtons_Jim theApp, Vector<String> vecSequence ) {
    this.theApp = theApp ;
    this.vecSequence = vecSequence;
  }

  /**
   * thread run method that is called when the thread start method is called
   */
  @Override
  public void run() {
    for ( int k = 0 ; k < vecSequence.size() ; k++ ) {
      AePlayWave thread = new AePlayWave( vecSequence.get( k ) ) ;
      theApp.incrementProgressBarValue();
      thread.start() ;  // play the selected audio clip
      try {          
        thread.join() ; // wait for the thread playing to clip to die
      } catch ( InterruptedException ie ) {
        // do nothing - required by the join() method
        //    this is a "checked exception", therefore it must be caught
      }
      //theApp.incrementProgressBarValue();
    }
  }
}