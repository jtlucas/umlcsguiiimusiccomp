/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * InstrumentInfo.java
 *
 * Created on Mar 18, 2009, 11:44:04 AM
 */

package edu.uml.cs.GUIProgramming.plaidler;

/**
 * This class contains an interface to display information about and allow the selection of new orchestra instruments.
 * @author Paul A Laidler, UMass Lowell Computer Science
 * @version 1.01, March 18, 2009
 */
public class InstrumentInfo extends javax.swing.JFrame {

    /** The orchestra object to be used by the Instrument information interface. */
    Orchestra myOrchestra;
    /** The orchestra application for reference within this class. */
    OrchestraStub orchestraApp = null;

    /** Creates new form InstrumentInfo */
    public InstrumentInfo() {
        //Use static method from heines utilities to set windows style UIManager
        edu.uml.cs.GUIProgramming.heines.GUIUtilities.SetNetBeansCompatibleUIManager();
        //create a new orchestra
        myOrchestra = new Orchestra();
        initComponents();
        //set label text to reflect the current state of the orchestra
        updateInstrumentInformationLabels();
    }

    /**
     * Call this constructor from the Main application to initialize the class level OrchestraStub object.
     * This method is intended to be called from other classes.
     * @param OrchestraStub the main application for reference within this class
     */
    public InstrumentInfo( OrchestraStub orchestraApp ) {
      this();   // call the default constructor, which must always be called first
      this.orchestraApp = orchestraApp;   // save the reference to the Main application
      this.myOrchestra = orchestraApp.myOrchestra;  // save the reference to the Main application's orchestra
      orchestraApp.attachButtonChangeListener( new OrchestraAppButtonListener() ); // Listen for button changes in main orchestra application.
    }

    /**
     * Attach the specified action listener to the instrument information combo box.
     * This method is intended to be called from other classes.
     */
    public void attachComboBoxListener(java.awt.event.ActionListener myActionListener) {
      jcb_InstrumentSelect.addActionListener(myActionListener);
    }

    /**
     * A button action listener to attach to the main orchestra application.
     */
    class OrchestraAppButtonListener implements java.awt.event.ActionListener {
        public void actionPerformed(java.awt.event.ActionEvent e) {
            Runnable updateInfoPanel = new Runnable() {
                public void run() {
                    //update label text to reflect the current state of the orchestra
                    updateInstrumentInformationLabels();
                    //update the combo box to point at the instrument selected on the new midi channel
                    jcb_InstrumentSelect.setSelectedIndex(myOrchestra.getSelectedInstrument());
                }
            };
            //InvokeLater to avoid updating instrument information before it has been changed by other button action listeners.
            javax.swing.SwingUtilities.invokeLater(updateInfoPanel);
        }
    }
  /**
   * Attach the information panel to the specified JPanel
   * This method is intended to be called from other classes.
   * @param jpnl - JPanel to attach information panel to.
   */
    public void attachInfoPanel( javax.swing.JPanel jpnl ) {
        jpnl.add(jpnl_InstrumentInformation);
    }
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jpnl_InstrumentInformation = new javax.swing.JPanel();
        jl_SelectedChannel = new javax.swing.JLabel();
        jl_SelectedInstrument = new javax.swing.JLabel();
        jcb_InstrumentSelect = new javax.swing.JComboBox();
        jpnl_InstrumentInfoTitle = new javax.swing.JPanel();
        jl_InstrumentInfoTitle = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Instrument Information Panel");

        jpnl_InstrumentInformation.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jl_SelectedChannel.setText("Channel");

        jl_SelectedInstrument.setText("Instrument");

        jcb_InstrumentSelect.setModel(generateInstrumentSelectModel());
        jcb_InstrumentSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcb_InstrumentSelectActionPerformed(evt);
            }
        });

        jpnl_InstrumentInfoTitle.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jl_InstrumentInfoTitle.setText("Instrument Information");
        jl_InstrumentInfoTitle.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        javax.swing.GroupLayout jpnl_InstrumentInfoTitleLayout = new javax.swing.GroupLayout(jpnl_InstrumentInfoTitle);
        jpnl_InstrumentInfoTitle.setLayout(jpnl_InstrumentInfoTitleLayout);
        jpnl_InstrumentInfoTitleLayout.setHorizontalGroup(
            jpnl_InstrumentInfoTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_InstrumentInfoTitleLayout.createSequentialGroup()
                .addComponent(jl_InstrumentInfoTitle)
                .addContainerGap(134, Short.MAX_VALUE))
        );
        jpnl_InstrumentInfoTitleLayout.setVerticalGroup(
            jpnl_InstrumentInfoTitleLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jl_InstrumentInfoTitle)
        );

        javax.swing.GroupLayout jpnl_InstrumentInformationLayout = new javax.swing.GroupLayout(jpnl_InstrumentInformation);
        jpnl_InstrumentInformation.setLayout(jpnl_InstrumentInformationLayout);
        jpnl_InstrumentInformationLayout.setHorizontalGroup(
            jpnl_InstrumentInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnl_InstrumentInfoTitle, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jpnl_InstrumentInformationLayout.createSequentialGroup()
                .addComponent(jl_SelectedChannel)
                .addContainerGap())
            .addGroup(jpnl_InstrumentInformationLayout.createSequentialGroup()
                .addComponent(jl_SelectedInstrument)
                .addContainerGap())
            .addComponent(jcb_InstrumentSelect, 0, 252, Short.MAX_VALUE)
        );
        jpnl_InstrumentInformationLayout.setVerticalGroup(
            jpnl_InstrumentInformationLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jpnl_InstrumentInformationLayout.createSequentialGroup()
                .addComponent(jpnl_InstrumentInfoTitle, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_SelectedChannel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jl_SelectedInstrument)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcb_InstrumentSelect, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnl_InstrumentInformation, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jpnl_InstrumentInformation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Instrument Select Combo Box Action performed
     * @param evt
     */
    private void jcb_InstrumentSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcb_InstrumentSelectActionPerformed
        // TODO add your handling code here:
        // Update the orchestra with the newly selected instrument
        myOrchestra.setInstrument( myOrchestra.getSelectedChannel(), jcb_InstrumentSelect.getSelectedIndex() );
        // Play a note for the user, (Middle C)
        myOrchestra.playNote(myOrchestra.getSelectedChannel(), 60, 80, 500);
        // Update label text to reflect the current state of the orchestra
        updateInstrumentInformationLabels();
}//GEN-LAST:event_jcb_InstrumentSelectActionPerformed

    /**
     * Update selected channel and selected instrument labels to reflect the state of the orchestra.
     */
    private void updateInstrumentInformationLabels() {
        jl_SelectedChannel.setText("Midi Channel:  " + (myOrchestra.getSelectedChannel() + 1) );
        jl_SelectedInstrument.setText("Instrument:  " + myOrchestra.getSelectedInstrumentName());
    }

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new InstrumentInfo().setVisible(true);
            }
        });
    }

    /**
     * Generate a ComboBoxModel to be used by the Instrument Selection combo box
     */
    private javax.swing.ComboBoxModel generateInstrumentSelectModel()
    {
      javax.swing.MutableComboBoxModel InstrumentSelectModel = new javax.swing.DefaultComboBoxModel();
      //Iterate through the instruments in the orchestra, and add them to the combo box.
      for( int i = 0; i < 128; i ++)
      {
        InstrumentSelectModel.addElement(myOrchestra.getInstrumentName(i));
      }
      return (javax.swing.ComboBoxModel) InstrumentSelectModel;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox jcb_InstrumentSelect;
    private javax.swing.JLabel jl_InstrumentInfoTitle;
    private javax.swing.JLabel jl_SelectedChannel;
    private javax.swing.JLabel jl_SelectedInstrument;
    private javax.swing.JPanel jpnl_InstrumentInfoTitle;
    private javax.swing.JPanel jpnl_InstrumentInformation;
    // End of variables declaration//GEN-END:variables

}
